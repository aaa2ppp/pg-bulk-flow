// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package parser

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF59a38b1DecodePgBulkFlowInternalParser(in *jlexer.Lexer, out *mongoNumberLong) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "$numberLong":
			out.N = in.JsonNumber()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF59a38b1EncodePgBulkFlowInternalParser(out *jwriter.Writer, in mongoNumberLong) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"$numberLong\":"
		out.RawString(prefix[1:])
		out.String(string(in.N))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v mongoNumberLong) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF59a38b1EncodePgBulkFlowInternalParser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v mongoNumberLong) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF59a38b1EncodePgBulkFlowInternalParser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *mongoNumberLong) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF59a38b1DecodePgBulkFlowInternalParser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *mongoNumberLong) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF59a38b1DecodePgBulkFlowInternalParser(l, v)
}
func easyjsonF59a38b1DecodePgBulkFlowInternalParser1(in *jlexer.Lexer, out *inputRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Count).UnmarshalJSON(data))
			}
		case "text":
			out.Text = string(in.UnsafeString())
		case "gender":
			out.Gender = string(in.UnsafeString())
		case "fname":
			out.FName = string(in.UnsafeString())
		case "f_form":
			out.FForm = string(in.UnsafeString())
		case "m_form":
			out.MForm = string(in.UnsafeString())
		case "ethnic":
			if in.IsNull() {
				in.Skip()
				out.Ethnic = nil
			} else {
				in.Delim('[')
				if out.Ethnic == nil {
					if !in.IsDelim(']') {
						out.Ethnic = make([]string, 0, 4)
					} else {
						out.Ethnic = []string{}
					}
				} else {
					out.Ethnic = (out.Ethnic)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.UnsafeString())
					out.Ethnic = append(out.Ethnic, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF59a38b1EncodePgBulkFlowInternalParser1(out *jwriter.Writer, in inputRecord) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Count).MarshalJSON())
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if in.FName != "" {
		const prefix string = ",\"fname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FName))
	}
	if in.FForm != "" {
		const prefix string = ",\"f_form\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FForm))
	}
	if in.MForm != "" {
		const prefix string = ",\"m_form\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MForm))
	}
	if len(in.Ethnic) != 0 {
		const prefix string = ",\"ethnic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Ethnic {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v inputRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF59a38b1EncodePgBulkFlowInternalParser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v inputRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF59a38b1EncodePgBulkFlowInternalParser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *inputRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF59a38b1DecodePgBulkFlowInternalParser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *inputRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF59a38b1DecodePgBulkFlowInternalParser1(l, v)
}
